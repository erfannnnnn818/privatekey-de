#!/usr/bin/env python3
import argparse
import secrets
import textwrap

# مقدار ثابت N از secp256k1
N = (1 << 256) - 0x14551231950B75FC4402DA1732FC9BEBF

def gen_private_key():
    return secrets.randbelow(N)

def format_key(key_int):
    hex_string = hex(key_int)[2:]  # حذف '0x'
    if len(hex_string) % 2 != 0:
        hex_string = '0' + hex_string  # اضافه کردن صفر برای کامل بودن بایت‌ها

    # به گروه‌های 2 رقمی تقسیم، بعد گروه‌های 16 تایی
    byte_pairs = textwrap.wrap(hex_string, 2)
    lines = textwrap.wrap(' '.join(byte_pairs), 64)
    return lines, ''.join(byte_pairs)

def main():
    parser = argparse.ArgumentParser(
        description="Script for generating a hash and displaying it on the screen",
        formatter_class=argparse.RawTextHelpFormatter
    )
    parser.add_argument("filename", nargs="?", help="Name of the file to process")
    parser.add_argument("-h", "--help", action="help", help="show this help message and exit")
    parser.add_argument("-javascript", action="store_true")
    parser.add_argument("-python", action="store_true")
    parser.add_argument("-java", action="store_true")
    parser.add_argument("-php", action="store_true")
    parser.add_argument("-c++", action="store_true")
    parser.add_argument("-go", action="store_true")
    parser.add_argument("-ruby", action="store_true")
    parser.add_argument("-address", type=str, help="Address for additional hashing")
    parser.add_argument("-debug", action="store_true")

    args = parser.parse_args()

    banner = r"""
  ____       __                      _            
 / __ \___  / /_  __  ______ _____ _(_)___  ____ _
/ / / / _ \/ __ \/ / / / __ `/ __ `/ / __ \/ __ `/
/ /_/ /  __/ /_/ / /_/ / /_/ / /_/ / / / / / /_/ / 
\____/\___/_.___/\__,_/\__, /\__, /_/_/ /_/\__, /  
                       /____//____/        /____/   
"""
    print(banner.strip())

    if args.filename:
        try:
            with open(args.filename, "r") as f:
                print("File contents:")
                print(f.read())
        except FileNotFoundError:
            print(f"File '{args.filename}' not found.")
            return

    print("\nResulting long sequence with address:")

    private_key = gen_private_key()
    formatted_lines, flattened = format_key(private_key)

    for line in formatted_lines:
        print(line)

    with open("save.txt", "w") as f:
        f.write(flattened)

    print("\nThe overall result has been successfully written to 'save.txt'.")
    print("\nContents of save.txt without spaces:")
    print(flattened)

if __name__ == "__main__":
    main()
